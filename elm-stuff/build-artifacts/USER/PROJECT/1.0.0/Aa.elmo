Elm.Aa = Elm.Aa || {};
Elm.Aa.make = function (_elm) {
   "use strict";
   _elm.Aa = _elm.Aa || {};
   if (_elm.Aa.values)
   return _elm.Aa.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Aa",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var dartColor = $Color.black;
   var drawDart = function (dart) {
      return $Graphics$Collage.filled(dartColor)($Graphics$Collage.circle(dart.radius));
   };
   var drawBoard = function (board) {
      return $Graphics$Collage.group(_L.fromArray([$Graphics$Collage.text($Text.height(40)($Text.color($Color.white)($Text.fromString($Basics.toString(board.numberOfDarts)))))
                                                  ,$Graphics$Collage.filled($Color.black)($Graphics$Collage.circle(board.radius))]));
   };
   var displayObject = F4(function (x,
   y,
   angle,
   form) {
      return $Graphics$Collage.rotate(angle)(A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: x,_1: y},
      form));
   });
   var displayBoard = function (board) {
      return A3(displayObject,
      board.x,
      board.y,
      board.angle)(drawBoard(board));
   };
   var displayDart = function (dart) {
      return A4(displayObject,
      dart.x,
      dart.y,
      0,
      drawDart(dart));
   };
   var displayBackground = F2(function (width,
   height) {
      return A2($Graphics$Collage.filled,
      $Color.white,
      A2($Graphics$Collage.rect,
      $Basics.toFloat(width),
      $Basics.toFloat(height)));
   });
   var collidedWithBoard = F2(function (dart,
   board) {
      return _U.cmp(dart.y,
      board.collisionY) > -1;
   });
   var stepObject = F2(function (delta,
   _v0) {
      return function () {
         return _U.replace([["x"
                            ,_v0.x + _v0.vx * delta]
                           ,["y",_v0.y + _v0.vy * delta]],
         _v0);
      }();
   });
   var stepDart = F3(function (delta,
   dart,
   board) {
      return function () {
         var collidedWithBoard$ = $Basics.not(dart.collidedWithBoard) ? A2(collidedWithBoard,
         dart,
         board) : dart.collidedWithBoard;
         var angle$ = dart.angle + (collidedWithBoard$ ? 0.1 : 0);
         var $ = dart.collidedWithBoard ? {ctor: "_Tuple2"
                                          ,_0: board.x + 2 * board.radius * $Basics.cos(angle$)
                                          ,_1: board.y + 2 * board.radius * $Basics.sin(angle$)} : {ctor: "_Tuple2"
                                                                                                   ,_0: dart.x
                                                                                                   ,_1: dart.y},
         x$ = $._0,
         y$ = $._1;
         var vy$ = dart.isFired && $Basics.not(dart.collidedWithBoard) ? 600 : 0;
         var dart$ = A2(stepObject,
         delta,
         _U.replace([["x",x$]
                    ,["y",y$]
                    ,["vy",vy$]
                    ,["angle",angle$]
                    ,["collidedWithBoard"
                     ,collidedWithBoard$]],
         dart));
         return dart$;
      }();
   });
   var stepBoard = F2(function (delta,
   board) {
      return A2(stepObject,
      delta,
      board);
   });
   var Game = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,board: b
             ,player: c
             ,spaceCount: d
             ,state: a};
   });
   var Pause = {ctor: "Pause"};
   var Play = {ctor: "Play"};
   var Object = F8(function (a,
   b,
   c,
   d,
   e,
   f,
   g,
   h) {
      return _U.insert("direction",
      g,
      _U.insert("angularVelocity",
      f,
      _U.insert("angle",
      e,
      _U.insert("vy",
      d,
      _U.insert("vx",
      c,
      _U.insert("y",
      b,
      _U.insert("x",a,h)))))));
   });
   var Right = {ctor: "Right"};
   var defaultDart = {_: {}
                     ,angle: 3 * $Basics.pi / 2
                     ,angularVelocity: 0
                     ,collidedWithBoard: false
                     ,direction: Right
                     ,isFired: false
                     ,radius: 10
                     ,vx: 0
                     ,vy: 0
                     ,x: 0
                     ,y: -300};
   var anyInFlight = F2(function (darts,
   board) {
      return function () {
         var check = function (dart) {
            return $Basics.not(dart.collidedWithBoard) && _U.cmp(dart.y,
            defaultDart.y) > 0;
         };
         var collided = $List.any(F2(function (x,
         y) {
            return _U.eq(x,y);
         })(true))(A2($List.map,
         check,
         darts));
         return collided;
      }();
   });
   var stepPlayer = F4(function (delta,
   board,
   space,
   player) {
      return function () {
         var dartToBeFired$ = space || player.isShooting ? function () {
            var dartToBeFired = space ? player.dartToBeFired + 1 : player.dartToBeFired;
            return dartToBeFired;
         }() : player.dartToBeFired;
         var setIsFired = F2(function (index,
         dart) {
            return _U.eq(index,
            dartToBeFired$) ? _U.replace([["isFired"
                                          ,true]],
            dart) : dart;
         });
         var darts$ = $List.map(function (dart) {
            return A3(stepDart,
            delta,
            dart,
            board);
         })(A2($List.indexedMap,
         setIsFired,
         player.darts));
         var isShooting$ = space || A2(anyInFlight,
         darts$,
         board);
         return _U.replace([["darts"
                            ,darts$]
                           ,["isShooting",isShooting$]
                           ,["dartToBeFired"
                            ,dartToBeFired$]],
         player);
      }();
   });
   var stepGame = F2(function (input,
   game) {
      return function () {
         var $ = game,
         state = $.state,
         board = $.board,
         player = $.player,
         spaceCount = $.spaceCount;
         var $ = input,
         space = $.space,
         enter = $.enter,
         delta = $.delta;
         var state$ = enter ? Play : state;
         var $ = space ? _U.eq(spaceCount,
         0) ? {ctor: "_Tuple2"
              ,_0: space
              ,_1: spaceCount + 1} : {ctor: "_Tuple2"
                                     ,_0: false
                                     ,_1: spaceCount + 1} : {ctor: "_Tuple2"
                                                            ,_0: space
                                                            ,_1: 0},
         spacePressed = $._0,
         spaceCount$ = $._1;
         var board$ = A2(stepBoard,
         delta,
         board);
         var b = A2($Debug.watch,
         "Board",
         board$);
         var player$ = A4(stepPlayer,
         delta,
         board$,
         spacePressed,
         player);
         var f = A2($Debug.watch,
         "First dart",
         $List.head(player$.darts));
         return _U.replace([["state"
                            ,state$]
                           ,["player",player$]
                           ,["board",board$]
                           ,["spaceCount",spaceCount$]],
         game);
      }();
   });
   var Left = {ctor: "Left"};
   var defaultBoard = {_: {}
                      ,angle: 0
                      ,angularVelocity: 5
                      ,collisionY: -85
                      ,direction: Left
                      ,numberOfDarts: 10
                      ,radius: 100
                      ,vx: 0
                      ,vy: 0
                      ,x: 0
                      ,y: 130};
   var defaultPlayer = {_: {}
                       ,angle: 0
                       ,angularVelocity: 0
                       ,dartToBeFired: -1
                       ,darts: A2($List.repeat,
                       10,
                       defaultDart)
                       ,direction: defaultBoard.direction
                       ,isShooting: false
                       ,vx: 0
                       ,vy: 0
                       ,x: 0
                       ,y: 0};
   var defaultGame = {_: {}
                     ,board: defaultBoard
                     ,player: defaultPlayer
                     ,spaceCount: 0
                     ,state: Pause};
   var drawLine = function (dart) {
      return $Graphics$Collage.traced($Graphics$Collage.solid(dartColor))(A2($Graphics$Collage.segment,
      {ctor: "_Tuple2"
      ,_0: defaultBoard.x
      ,_1: defaultBoard.y},
      {ctor: "_Tuple2"
      ,_0: dart.x
      ,_1: dart.y}));
   };
   var display = F2(function (_v2,
   _v3) {
      return function () {
         return function () {
            switch (_v2.ctor)
            {case "_Tuple2":
               return function () {
                    var lineForms = $List.map(drawLine)(A2($List.filter,
                    function (_) {
                       return _.collidedWithBoard;
                    },
                    _v3.player.darts));
                    var dartForms = A2($List.map,
                    displayDart,
                    _v3.player.darts);
                    return A3($Graphics$Element.container,
                    _v2._0,
                    _v2._1,
                    $Graphics$Element.middle)(A2($Graphics$Collage.collage,
                    _v2._0,
                    _v2._1)(A2($Basics._op["++"],
                    _L.fromArray([A2(displayBackground,
                                 _v2._0,
                                 _v2._1)
                                 ,displayBoard(_v3.board)]),
                    A2($Basics._op["++"],
                    dartForms,
                    lineForms))));
                 }();}
            _U.badCase($moduleName,
            "between lines 302 and 316");
         }();
      }();
   });
   var delta = A2($Signal._op["<~"],
   $Time.inSeconds,
   $Time.fps(60));
   var Input = F3(function (a,
   b,
   c) {
      return {_: {}
             ,delta: c
             ,enter: b
             ,space: a};
   });
   var input = $Signal.sampleOn(delta)(A2($Signal._op["~"],
   A2($Signal._op["~"],
   A2($Signal._op["<~"],
   Input,
   $Keyboard.space),
   $Keyboard.enter),
   delta));
   var gameState = A3($Signal.foldp,
   stepGame,
   defaultGame,
   input);
   var main = A2($Signal._op["~"],
   A2($Signal._op["<~"],
   display,
   $Window.dimensions),
   gameState);
   _elm.Aa.values = {_op: _op
                    ,Input: Input
                    ,delta: delta
                    ,input: input
                    ,Left: Left
                    ,Right: Right
                    ,Object: Object
                    ,Play: Play
                    ,Pause: Pause
                    ,Game: Game
                    ,defaultBoard: defaultBoard
                    ,defaultDart: defaultDart
                    ,defaultPlayer: defaultPlayer
                    ,defaultGame: defaultGame
                    ,stepObject: stepObject
                    ,collidedWithBoard: collidedWithBoard
                    ,stepPlayer: stepPlayer
                    ,anyInFlight: anyInFlight
                    ,stepDart: stepDart
                    ,stepBoard: stepBoard
                    ,stepGame: stepGame
                    ,gameState: gameState
                    ,displayBackground: displayBackground
                    ,displayObject: displayObject
                    ,drawBoard: drawBoard
                    ,displayBoard: displayBoard
                    ,dartColor: dartColor
                    ,drawDart: drawDart
                    ,drawLine: drawLine
                    ,displayDart: displayDart
                    ,display: display
                    ,main: main};
   return _elm.Aa.values;
};