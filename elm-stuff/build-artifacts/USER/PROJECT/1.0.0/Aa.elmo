Elm.Aa = Elm.Aa || {};
Elm.Aa.make = function (_elm) {
   "use strict";
   _elm.Aa = _elm.Aa || {};
   if (_elm.Aa.values)
   return _elm.Aa.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Aa",
   $Basics = Elm.Basics.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var stepObject = F2(function (time,
   _v0) {
      return function () {
         return _U.replace([["x"
                            ,_v0.x + _v0.vx * time]
                           ,["y",_v0.y + _v0.vy * time]],
         _v0);
      }();
   });
   var collidedWithBoard = F2(function (dart,
   board) {
      return _U.eq(board.y,dart.y);
   });
   var stepDart = F3(function (time,
   _v2,
   board) {
      return function () {
         return function () {
            var y = A2(collidedWithBoard,
            _v2,
            board);
            var dart$ = A2(stepObject,
            time,
            _U.replace([["vy",20]],_v2));
            return dart$;
         }();
      }();
   });
   var Game = F3(function (a,b,c) {
      return {_: {}
             ,board: b
             ,player: c
             ,state: a};
   });
   var Pause = {ctor: "Pause"};
   var Play = {ctor: "Play"};
   var stepGame = F2(function (input,
   game) {
      return function () {
         var $ = game,
         state = $.state,
         board = $.board,
         player = $.player;
         var $ = input,
         space = $.space,
         delta = $.delta;
         var state$ = space ? Play : Pause;
         var darts$ = A2($List.map,
         function (dart) {
            return A3(stepDart,
            delta,
            dart,
            board);
         },
         player.darts);
         var player$ = _U.replace([["darts"
                                   ,darts$]],
         player);
         return _U.replace([["state"
                            ,state$]
                           ,["player",player$]],
         game);
      }();
   });
   var Right = {ctor: "Right"};
   var Left = {ctor: "Left"};
   var defaultGame = {_: {}
                     ,board: {_: {}
                             ,direction: Left
                             ,numberOfDarts: 0
                             ,vx: 1
                             ,vy: 1
                             ,x: 0
                             ,y: 0}
                     ,player: {_: {}
                              ,darts: _L.fromArray([])
                              ,vx: 0
                              ,vy: 0
                              ,x: 0
                              ,y: 10}
                     ,state: Pause};
   var main = $Graphics$Element.show(defaultGame);
   var Object = F5(function (a,
   b,
   c,
   d,
   e) {
      return _U.insert("vy",
      d,
      _U.insert("vx",
      c,
      _U.insert("y",
      b,
      _U.insert("x",a,e))));
   });
   var delta = A2($Signal._op["<~"],
   $Time.inSeconds,
   $Time.fps(60));
   var Input = F2(function (a,b) {
      return {_: {}
             ,delta: b
             ,space: a};
   });
   var input = $Signal.sampleOn(delta)(A2($Signal._op["~"],
   A2($Signal._op["<~"],
   Input,
   $Keyboard.space),
   delta));
   var gameState = A3($Signal.foldp,
   stepGame,
   defaultGame,
   input);
   _elm.Aa.values = {_op: _op
                    ,Input: Input
                    ,delta: delta
                    ,input: input
                    ,Object: Object
                    ,Left: Left
                    ,Right: Right
                    ,Play: Play
                    ,Pause: Pause
                    ,Game: Game
                    ,defaultGame: defaultGame
                    ,collidedWithBoard: collidedWithBoard
                    ,stepObject: stepObject
                    ,stepDart: stepDart
                    ,stepGame: stepGame
                    ,gameState: gameState
                    ,main: main};
   return _elm.Aa.values;
};